# Fabric notebook source

# METADATA ********************

# META {
# META   "kernel_info": {
# META     "name": "jupyter",
# META     "jupyter_kernel_name": "python3.11"
# META   },
# META   "dependencies": {
# META     "lakehouse": {
# META       "default_lakehouse": "81cbac54-cfa3-495b-ad48-b44a92bb72fb",
# META       "default_lakehouse_name": "DataScienceLearnLakehouse",
# META       "default_lakehouse_workspace_id": "a677a3bf-5fb2-455e-abaa-9e850bde3e1a",
# META       "known_lakehouses": [
# META         {
# META           "id": "81cbac54-cfa3-495b-ad48-b44a92bb72fb"
# META         }
# META       ]
# META     },
# META     "environment": {
# META       "environmentId": "2b9c63f7-1498-40e2-81b9-a8ccb1b5f193",
# META       "workspaceId": "03f3982f-785f-4a2f-8ec0-4be54060ee7b"
# META     }
# META   }
# META }

# MARKDOWN ********************

# In this tutorial, you will learn how to optimize models with **Hyper parameter search**. 
# 
# # Introduction
# 
# As of now we have covered some of the basic machine learning algorithms and you must have noticed that in case of Ridge regression for example we have to provide the value of 'Alpha', similarly in case of Decision trees that we will look in next class, you need to provide the number of leafs. Such parameters which needs to be specified before fitting the model are called as **Hyperparameter**. Since hyperparameters can't be estimated from data, getting their value correct have the biggest impact on the model performance. Only way to find the best possible value of hyperparameters is to try them and choose the best performing one, this process is knows as hyperparameter tuning.
# 
# Just to rephrase the difference between parameter and hyperparameter:
# 
# 
# ## Parameter <a id ="3"></a>
# 
# * Parameter also known as model parameter is a configuration variable which is internal to model and whose value can be estimated from the data
# * They are required by the model when making predictions
# * They are estimated or learned from data
# * They are often not set manually by the practitioner
# * They are often saved as part of the learned model
# * Some examples of model parameters include:
#   * The coefficients in a linear regression or logistic regression
# 
# ## Hyperparameter <a id ="4"></a>
# 
# * Hyperparameter are external to the model and whose values cannot be estimated based on the data
# * They are often specified by the practitioner (By testing the model with test data)
# * They are often tuned for a given predictive modeling problem
# * They can often be set using heuristics
# * Some examples of model hyperparameters include:
#   * The K in K-nearest neighbors (will come to this one later)
#   * No of trees (n_estimators) in Random Forest Algorithm (will come to this one later)
#   * Alpha in Ridge regression
#   
# 
# Lets now look to the strategies and steps for hypertuning optmization.
# 
# 
# # Hypertuning Steps <a id ="5"></a>
# 
# * Make a list of different hyperparameters based on the problem in hand. If there are more than one hyperparameter then make grid with different combination of parameters
# * Fit all of them separately to the model. If you have large number of hyperparameters then training time and computational cost will be very high. To reduce it you may try few random combination of hyperparameters, instead of going for every possible permutation.
# * Note down the model performance
# * Choose the best performing one
# 
# Ideally you use cross validation technique for hyperparameter tuning to avoid the model overfitting on test data.
# 
# # Tuning Strategy <a id ="6"></a>
# 
# Models can have many hyperparameters and to try every permutation of it can be treated as a search problem. Below are the two most common ways to perform the hyperparameter tuning.
# 
# ## Grid Search <a id ="7"></a>
# 
# * Grid search exhaustively considers all parameter combinations for an estimator.
# * GridSearchCV implements a “fit” and a “score” method. It also implements “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.
# * The parameters of the estimator used to apply these methods are optimized by cross-validated grid-search over a parameter grid.
# * Since grid search goes through every possible combination of hyperparameters, it is computationally expensive and takes longer time to complete.
# 
# ## Random Search <a id ="8"></a>
# 
# * Unlike grid search, random search perform randomized search on hyper parameters and selects few parameter combinations for an estimator.
# * RandomizedSearchCV implements a “fit” and a “score” method. It also implements “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.
# * The parameters of the estimator used to apply these methods are optimized by cross-validated search over parameter settings.
# * Since random search goes through selective combination of hyperparameters, it is computationally less expensive and takes less time to complete.


# MARKDOWN ********************

# ![Screenshot_4.png](attachment:b1948b52-5b6b-48f6-8cdb-f8647a213125.png)

# ATTACHMENTS ********************

# ATTA {
# ATTA   "b1948b52-5b6b-48f6-8cdb-f8647a213125.png": {
# ATTA     "image/png": ""
# ATTA   }
# ATTA }

# MARKDOWN ********************

# Lets now look on how to apply this
# 
# ### Read the Data and EDA (Exploratory Data Analysis)

# CELL ********************

import pandas as pd
import numpy as np 
import mlflow
mlflow.autolog(disable=True)

wine_df = pd.read_csv("/lakehouse/default/Files/DMML_Aula6/winequality-red.csv")
wine_df.head()




# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

wine_df.dtypes


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

wine_df.isna().sum() / len(wine_df)


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

(
    wine_df
    .groupby('quality')
    .agg(n=('quality', 'size'))
    .reset_index()
    .plot(kind='bar', x='quality', y='n', title='Wine quality distribution')
);

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ### Create the label

# CELL ********************

wine_df = wine_df.assign(good_wine=lambda df: np.where(df.quality < 7, 0, 1))


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

wine_df.head()


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

(
    wine_df
    .groupby('good_wine')
    .agg(n=('good_wine', 'size'))
    .reset_index()
    .assign(n_prop=lambda df: 100 * (df.n / df.n.sum()))
)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ## Split into training and test

# CELL ********************

X = wine_df.drop(['quality', 'good_wine'], axis='columns')
y = wine_df['good_wine']

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ### Model Training
# 
# Dont worry to much about the algorithm used, you will learn more about it in the next class. Focus on the process to learn the best hyperparameters

# CELL ********************

from sklearn.ensemble import RandomForestClassifier


model = RandomForestClassifier(random_state=0,max_depth=2)
model.fit(X_train, y_train)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ### Evaluation
# 
# Lets take a look at the roc auc score for this simple model not tunned
# 


# CELL ********************

from sklearn.metrics import roc_auc_score

y_predictions = model.predict_proba(X_test)[:,1]
roc_auc_score(y_test, y_predictions)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ## Apply Grid Search
# 
# Okay, now that we have a baseline our goal is to apply Grid search alongside Cross validation to help improve the model. 
# Let's put our hands on and improve the results.

# CELL ********************

from sklearn.model_selection import GridSearchCV

model = RandomForestClassifier(random_state=0)


hyperparameters = {
    'max_depth'   : [ 2,  5,  7, 10],
    'n_estimators': [20, 30, 50, 75]
}

grid_search = GridSearchCV(model, hyperparameters, n_jobs=-1)

#if you want to train with cross valiation you just need to set cv, for example equals to 3
# grid_search = GridSearchCV(model, hyperparameters, n_jobs=-1)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

grid_search.fit(X_train, y_train)


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

results = pd.DataFrame(grid_search.cv_results_)
results.sort_values(by='rank_test_score').head(3)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# And now lets look to the best model

# CELL ********************

# picking the best model
best_model_gs = grid_search.best_estimator_

y_predictions = best_model_gs.predict_proba(X_test)[:,1]
roc_auc_score(y_test, y_predictions)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# ## Apply Random Search
# 
# Okay, now that we have a baseline and results from Grid search, lets apply this to random search. 
# Let's put our hands on and improve the results.

# CELL ********************

from sklearn.model_selection import RandomizedSearchCV

# n_iter=5 > Number of parameter settings that are sampled. 
# So instaed of 12 it will randomly search for only 5 combinations for each fold

model = RandomForestClassifier(random_state=0)


hyperparameters = {
    'max_depth'   : [ 2,  5,  7, 10],
    'n_estimators': [20, 30, 50, 75]
}

rsc = RandomizedSearchCV(estimator = model, param_distributions= hyperparameters,cv=5,n_iter = 5,verbose =1)
rsc.fit(X_train, y_train)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# CELL ********************

print(f'Best hyperparameters: {rsc.best_params_}') 
print(f'Best score: {rsc.best_score_}')


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "jupyter_python"
# META }

# MARKDOWN ********************

# # Conclusion
# 
# As you can see from above results hyperparameter tuning helps to find the best parameters which can improve the model performance. Since grid search takes more time and is computationally more heavy, it's not suitable for big datasets. Random search is obvious choice for big datasets, but it doesn't guarantee to find the best parameters as it uses only selected samples of the parameters.
# 
# Ideally you would explore the hyper parameters that optimize the results.
# 
# ## Keep going
# 
# Move to the next notebook for pratical exercise
